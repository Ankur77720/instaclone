<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Bootstrap demo</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi"
      crossorigin="anonymous"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="../stylesheets/style.css" />
    <link rel="stylesheet" href="../stylesheets/chats.css" />
    <link rel="stylesheet" href="../stylesheets/responsive.css" />
  </head>
  <body>
    <%- include('./components/navbar') %>
    <div id="main">
      <div class="chats">
        <h4 class="bg-light py-2">Your chats</h4>
        <% userData.following.forEach((userChat,index)=>{ %>
        <div
          id="user<%= index %>"
          onclick='openNewChat("<%= userChat.username %>","<%= userChat.pic %>","<%= userChat.username %>","<%= index %>")'
          class="user d-flex gap-2 px-2 mb-2"
        >
          <div class="avatar">
            <img
              src="../uploads/userUploads/<%= userChat.pic %>"
              alt=""
              srcset=""
            />
          </div>
          <div
            class="text-start align-items-start d-flex flex-column h-100 py-3"
          >
            <h6 class="m-0">
              <%= userChat.firstName %><%= userChat.lastName %>
            </h6>
            <small> @<%= userChat.username %></small>
          </div>
        </div>
        <%})%>
      </div>
      <div class="message_area">
        <div
          class="chatHeader border-bottom d-flex gap-2 px-4 py-1 align-items-center"
        >
          <i
            class="ri-arrow-left-line tbn"
            style="font-size: 1.5rem"
            onclick="backToChats()"
          ></i>
          <div class="avatar"> </div>
          <h5></h5>
        </div>
        <div class="messages"> </div>
        <div class="typePad">
          <textarea
            placeholder="Write a message..."
            class="m-0"
            id="chatTypePad"
          ></textarea>
          <button onclick="sendMessage()" class="btn"
            ><i class="ri-send-plane-2-fill"></i
          ></button>
        </div>
      </div>
      <div
        id="message_dummy"
        class="message_area_dummy d-flex justify-content-center align-items-center"
      >
        <div
          class="d-flex justify-content-center align-content-center flex-column text-center text-capitalize"
        >
          <div>
            <svg
              aria-label="Direct"
              class="_ab6-"
              color="#262626"
              fill="#262626"
              height="96"
              role="img"
              viewBox="0 0 96 96"
              width="96"
            >
              <circle
                cx="48"
                cy="48"
                fill="none"
                r="47"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
              ></circle>
              <line
                fill="none"
                stroke="currentColor"
                stroke-linejoin="round"
                stroke-width="2"
                x1="69.286"
                x2="41.447"
                y1="33.21"
                y2="48.804"
              ></line>
              <polygon
                fill="none"
                points="47.254 73.123 71.376 31.998 24.546 32.002 41.448 48.805 47.254 73.123"
                stroke="currentColor"
                stroke-linejoin="round"
                stroke-width="2"
              ></polygon>
            </svg>
          </div>
          <p class="fw-semibold m-0">Send Messages</p>
          <p>Send private photos and messages to a friend or group.</p>
        </div>
      </div>
    </div>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
      crossorigin="anonymous"
    ></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      function backToChats() {
        if (window.innerWidth <= 500) {
          document.querySelector(".chats").style.display = "inline-block";
          document.querySelector(".message_area").style.display = "none";
          document.querySelector(".navbar").style.display = "inline-block";
        }
      }
      var socket = io();
      let currentRoom;
      let currentUserChats = JSON.parse(`<%-JSON.stringify(userData.chats)%>`);
      var userName = "<%= userData.username %>";
      let openedChat;
      socket.emit("login", userName);

      let messageElement = document.querySelector("#chatTypePad");
      // Open new chat
      function openNewChat(username, pic, usName, index) {
        document.querySelectorAll(".user").forEach((elem) => {
          elem.style.backgroundColor = "#fff";
        });
        if (window.innerWidth <= 500) {
          document.querySelector(".chats").style.display = "none";
          document.querySelector(".navbar").style.display = "none";
        }
        console.log(document.querySelector(`#user${index}`));
        document.querySelector(`#user${index}`).style.backgroundColor =
          "#d0d0d0";
        document.querySelector(".message_area").style.display = "inline-block";
        try {
          document
            .querySelector("#main")
            .removeChild(document.querySelector("#message_dummy"));
        } catch (err) {}
        // console.log(document.querySelector(".message_area_dummy"));
        document.querySelector(".messages").innerHTML = "";
        document.querySelector(".message_area .avatar").innerHTML = `<img
              src=../uploads/userUploads/${pic}
              alt=""
              srcset=""
            />`;
        document.querySelector(".message_area h5").innerText = `${usName}`;
        openedChat = currentUserChats[username];
        currentRoom = openedChat.roomId;
        openedChat.chats.forEach((msg) => {
          console.log(msg.from, username);
          if (msg.from == userName) {
            addNewMessage(
              { user: msg.from, message: msg.msg },
              "outgoingMessage"
            );
          } else {
            addNewMessage(
              { user: msg.from, message: msg.msg },
              "incomingMessage"
            );
          }
        });
        socket.emit("joinPrivateRoom", currentRoom);
        socket.emit("joinPrivateRoomOpposite", {
          username: openedChat.receiverUser,
          roomId: currentRoom,
        });
      }
      // Open new chat

      // joined by server request
      socket.on("joinPrivateRoom", (roomId) => {
        currentRoom = roomId;
        socket.emit("joinPrivateRoom", currentRoom);
      });
      // joined by server request

      function sendMessage() {
        let value = `${document.querySelector("#chatTypePad").value}`.replace(
          /\r?\n/g,
          " "
        );
        // value = value.slice(0, value.indexOf("\n") + 1);
        let msg = {
          user: userName,
          message: value,
          to: document.querySelector(".message_area h5").innerText,
        };
        // sending message to opposite user
        socket.emit("message", { msg: msg, roomId: currentRoom });
        // sending message to opposite user
        addNewMessage(msg, "outgoingMessage");
        document.querySelector("#chatTypePad").value = "";
      }
      // listen to message Field
      messageElement.addEventListener("keyup", (e) => {
        if (e.key == "Enter") {
          sendMessage();
        }
      });
      // listen to message Field

      // listening to incoming  message
      socket.on("message", (msg) => {
        addNewMessage(msg, "incomingMessage");
      });
      // listening to incoming  message

      function addNewMessage(msg, type) {
        let message = document.createElement("div");
        msg = `<p class='p-0 m-0' > ${msg.message} </p> `;
        message.innerHTML = msg;
        message.classList.add("message", type);
        document.querySelector(".messages").appendChild(message);
        document.querySelector(".messages").scrollTop =
          document.querySelector(".messages").scrollHeight;
      }
    </script>
  </body>
</html>
